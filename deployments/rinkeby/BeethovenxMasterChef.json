{
  "address": "0xde37A65C454EB4b0FA0622e47b4B75fc23525b19",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract BeethovenxToken",
          "name": "_beets",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasuryAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_beetsPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IRewarder",
          "name": "rewarder",
          "type": "address"
        }
      ],
      "name": "LogPoolAddition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IRewarder",
          "name": "rewarder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "overwrite",
          "type": "bool"
        }
      ],
      "name": "LogSetPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accBeetsPerShare",
          "type": "uint256"
        }
      ],
      "name": "LogUpdatePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "SetTreasuryAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_beetsPerSec",
          "type": "uint256"
        }
      ],
      "name": "UpdateEmissionRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "POOL_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TREASURY_PERCENTAGE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "contract IRewarder",
          "name": "_rewarder",
          "type": "address"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beets",
      "outputs": [
        {
          "internalType": "contract BeethovenxToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "beetsPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lpTokens",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingBeets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pending",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accBeetsPerShare",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewarder",
      "outputs": [
        {
          "internalType": "contract IRewarder",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IRewarder",
          "name": "_rewarder",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "overwrite",
          "type": "bool"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasuryAddress",
          "type": "address"
        }
      ],
      "name": "treasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_beetsPerBlock",
          "type": "uint256"
        }
      ],
      "name": "updateEmissionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "allocPoint",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRewardBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accBeetsPerShare",
              "type": "uint256"
            }
          ],
          "internalType": "struct BeethovenxMasterChef.PoolInfo",
          "name": "pool",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "withdrawAndHarvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2606171df3e4d9d9849d846dc03077021576c93881e754370a7970f4552f8b90",
  "receipt": {
    "to": null,
    "from": "0x4fbe899d37fb7514adf2f41B0630E018Ec275a0C",
    "contractAddress": "0xde37A65C454EB4b0FA0622e47b4B75fc23525b19",
    "transactionIndex": 37,
    "gasUsed": "1913078",
    "logsBloom": "0x00000000000000000000000000080000000000000000000000800000000000000000000000000000000000000000000000000000000008000000000000000000001000004000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000004000000000000000000000000000000000000000",
    "blockHash": "0x99e13f1f318bea038734db2cfff4a810e9e82be71224d3668c602fc5d8538cc5",
    "transactionHash": "0x2606171df3e4d9d9849d846dc03077021576c93881e754370a7970f4552f8b90",
    "logs": [
      {
        "transactionIndex": 37,
        "blockNumber": 9388967,
        "transactionHash": "0x2606171df3e4d9d9849d846dc03077021576c93881e754370a7970f4552f8b90",
        "address": "0xde37A65C454EB4b0FA0622e47b4B75fc23525b19",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004fbe899d37fb7514adf2f41b0630e018ec275a0c"
        ],
        "data": "0x",
        "logIndex": 34,
        "blockHash": "0x99e13f1f318bea038734db2cfff4a810e9e82be71224d3668c602fc5d8538cc5"
      }
    ],
    "blockNumber": 9388967,
    "cumulativeGasUsed": "9415586",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3E3a61eC8F9D2E677bfc6f8F044B70e3C153eBED",
    "0x500F8fe004E978D1c58dba852BfE7bBa8Ae434c1",
    "5050000000000000000",
    "9387260"
  ],
  "solcInputHash": "e50beabc3450ba6330d3349581129fb9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract BeethovenxToken\",\"name\":\"_beets\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_beetsPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IRewarder\",\"name\":\"rewarder\",\"type\":\"address\"}],\"name\":\"LogPoolAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IRewarder\",\"name\":\"rewarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"overwrite\",\"type\":\"bool\"}],\"name\":\"LogSetPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accBeetsPerShare\",\"type\":\"uint256\"}],\"name\":\"LogUpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetTreasuryAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_beetsPerSec\",\"type\":\"uint256\"}],\"name\":\"UpdateEmissionRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"POOL_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TREASURY_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"contract IRewarder\",\"name\":\"_rewarder\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beets\",\"outputs\":[{\"internalType\":\"contract BeethovenxToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beetsPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpTokens\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingBeets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accBeetsPerShare\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewarder\",\"outputs\":[{\"internalType\":\"contract IRewarder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IRewarder\",\"name\":\"_rewarder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"overwrite\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"}],\"name\":\"treasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_beetsPerBlock\",\"type\":\"uint256\"}],\"name\":\"updateEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accBeetsPerShare\",\"type\":\"uint256\"}],\"internalType\":\"struct BeethovenxMasterChef.PoolInfo\",\"name\":\"pool\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawAndHarvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"harvest(uint256,address)\":{\"params\":{\"_pid\":\"The index of the pool. See `poolInfo`.\",\"_to\":\"Receiver of BEETS rewards.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"set(uint256,uint256,address,bool)\":{\"params\":{\"_allocPoint\":\"New AP of the pool.\",\"_pid\":\"The index of the pool. See `poolInfo`.\",\"_rewarder\":\"Address of the rewarder delegate.\",\"overwrite\":\"True if _rewarder should be `set`. Otherwise `_rewarder` is ignored.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawAndHarvest(uint256,uint256,address)\":{\"params\":{\"_amount\":\"LP token amount to withdraw.\",\"_pid\":\"The index of the pool. See `poolInfo`.\",\"_to\":\"Receiver of the LP tokens and BEETS rewards.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"harvest(uint256,address)\":{\"notice\":\"Harvest proceeds for transaction sender to `_to`.\"},\"lpTokens(uint256)\":{\"notice\":\"Address of the LP token for each MCV pool.\"},\"rewarder(uint256)\":{\"notice\":\"Address of each `IRewarder` contract in MCV.\"},\"withdrawAndHarvest(uint256,uint256,address)\":{\"notice\":\"Withdraw LP tokens from MCV and harvest proceeds for transaction sender to `_to`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BeethovenxMasterChef.sol\":\"BeethovenxMasterChef\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/BeethovenxMasterChef.sol\":{\"content\":\"// SPDX-License-Identifier: MIXED\\n\\n// License-Identifier: MIXED\\n\\n// Sources flattened with hardhat v2.6.1 https://hardhat.org\\n\\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.3.0\\n\\n// License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Address.sol@v4.3.0\\n\\n// License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol@v4.3.0\\n\\n// License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/structs/EnumerableSet.sol@v4.3.0\\n\\n// License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol@v4.3.0\\n\\n// License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\\n\\n// File @openzeppelin/contracts/utils/Context.sol@v4.3.0\\n\\n// License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\n// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v4.3.0\\n\\n// License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\\n\\n// File @openzeppelin/contracts/access/Ownable.sol@v4.3.0\\n\\n// License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\\n// File contracts_unflattened/token/BeethovenxToken.sol\\n\\n// License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\n\\ncontract BeethovenxToken is ERC20(\\\"BeethovenxToken\\\", \\\"BEETS\\\"), Ownable {\\n    uint256 public constant MAX_SUPPLY = 250_000_000e18; // 250 million beets\\n\\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (MasterChef).\\n    function mint(address _to, uint256 _amount) public onlyOwner {\\n        require(\\n            totalSupply() + _amount <= MAX_SUPPLY,\\n            \\\"BEETS::mint: cannot exceed max supply\\\"\\n        );\\n        _mint(_to, _amount);\\n    }\\n}\\n\\n\\n// File contracts_unflattened/interfaces/IRewarder.sol\\n\\n// License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\ninterface IRewarder {\\n    function onBeetsReward(\\n        uint256 pid,\\n        address user,\\n        address recipient,\\n        uint256 beetsAmount,\\n        uint256 newLpAmount\\n    ) external;\\n\\n    function pendingTokens(\\n        uint256 pid,\\n        address user,\\n        uint256 beetsAmount\\n    ) external view returns (IERC20[] memory, uint256[] memory);\\n}\\n\\n\\n// File contracts_unflattened/token/BeethovenxMasterChef.sol\\n\\n// License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\n\\n\\n\\n// Have fun reading it. Hopefully it's still bug-free\\ncontract BeethovenxMasterChef is Ownable {\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of BEETS\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * pool.accBeetsPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accBeetsPerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n    // Info of each pool.\\n    struct PoolInfo {\\n        // we have a fixed number of BEETS tokens released per block, each pool gets his fraction based on the allocPoint\\n        uint256 allocPoint; // How many allocation points assigned to this pool. the fraction BEETS to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that BEETS distribution occurs.\\n        uint256 accBeetsPerShare; // Accumulated BEETS per LP share. this is multiplied by ACC_BEETS_PRECISION for more exact results (rounding errors)\\n    }\\n    // The BEETS TOKEN!\\n    BeethovenxToken public beets;\\n\\n    // Treasury address.\\n    address public treasuryAddress;\\n\\n    // BEETS tokens created per block.\\n    uint256 public beetsPerBlock;\\n\\n    uint256 private constant ACC_BEETS_PRECISION = 1e12;\\n\\n    // distribution percentages: a value of 1000 = 100%\\n    // 12.8% percentage of pool rewards that goes to the treasury.\\n    uint256 public constant TREASURY_PERCENTAGE = 128;\\n\\n    // 87.2% percentage of pool rewards that goes to LP holders.\\n    uint256 public constant POOL_PERCENTAGE = 872;\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    // Info of each user that stakes LP tokens per pool. poolId => address => userInfo\\n    /// @notice Address of the LP token for each MCV pool.\\n    IERC20[] public lpTokens;\\n\\n    EnumerableSet.AddressSet private lpTokenAddresses;\\n\\n    /// @notice Address of each `IRewarder` contract in MCV.\\n    IRewarder[] public rewarder;\\n\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo; // mapping form poolId => user Address => User Info\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n    // The block number when BEETS mining starts.\\n    uint256 public startBlock;\\n\\n    event Deposit(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount,\\n        address indexed to\\n    );\\n    event Withdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount,\\n        address indexed to\\n    );\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount,\\n        address indexed to\\n    );\\n    event Harvest(address indexed user, uint256 indexed pid, uint256 amount);\\n    event LogPoolAddition(\\n        uint256 indexed pid,\\n        uint256 allocPoint,\\n        IERC20 indexed lpToken,\\n        IRewarder indexed rewarder\\n    );\\n    event LogSetPool(\\n        uint256 indexed pid,\\n        uint256 allocPoint,\\n        IRewarder indexed rewarder,\\n        bool overwrite\\n    );\\n    event LogUpdatePool(\\n        uint256 indexed pid,\\n        uint256 lastRewardBlock,\\n        uint256 lpSupply,\\n        uint256 accBeetsPerShare\\n    );\\n    event SetTreasuryAddress(\\n        address indexed oldAddress,\\n        address indexed newAddress\\n    );\\n    event UpdateEmissionRate(address indexed user, uint256 _beetsPerSec);\\n\\n    constructor(\\n        BeethovenxToken _beets,\\n        address _treasuryAddress,\\n        uint256 _beetsPerBlock,\\n        uint256 _startBlock\\n    ) {\\n        require(\\n            _beetsPerBlock <= 6e18,\\n            \\\"maximum emission rate of 6 beets per block exceeded\\\"\\n        );\\n        beets = _beets;\\n        treasuryAddress = _treasuryAddress;\\n        beetsPerBlock = _beetsPerBlock;\\n        startBlock = _startBlock;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        IRewarder _rewarder\\n    ) public onlyOwner {\\n        require(\\n            Address.isContract(address(_lpToken)),\\n            \\\"add: LP token must be a valid contract\\\"\\n        );\\n        require(\\n            Address.isContract(address(_rewarder)) ||\\n                address(_rewarder) == address(0),\\n            \\\"add: rewarder must be contract or zero\\\"\\n        );\\n        // we make sure the same LP cannot be added twice which would cause trouble\\n        require(\\n            !lpTokenAddresses.contains(address(_lpToken)),\\n            \\\"add: LP already added\\\"\\n        );\\n\\n        massUpdatePools();\\n\\n        // respect startBlock!\\n        uint256 lastRewardBlock =\\n            block.number > startBlock ? block.number : startBlock;\\n        totalAllocPoint = totalAllocPoint + _allocPoint;\\n\\n        // LP tokens, rewarders & pools are always on the same index which translates into the pid\\n        lpTokens.push(_lpToken);\\n        lpTokenAddresses.add(address(_lpToken));\\n        rewarder.push(_rewarder);\\n\\n        poolInfo.push(\\n            PoolInfo({\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: lastRewardBlock,\\n                accBeetsPerShare: 0\\n            })\\n        );\\n        emit LogPoolAddition(\\n            lpTokens.length - 1,\\n            _allocPoint,\\n            _lpToken,\\n            _rewarder\\n        );\\n    }\\n\\n    // Update the given pool's BEETS allocation point. Can only be called by the owner.\\n    /// @param _pid The index of the pool. See `poolInfo`.\\n    /// @param _allocPoint New AP of the pool.\\n    /// @param _rewarder Address of the rewarder delegate.\\n    /// @param overwrite True if _rewarder should be `set`. Otherwise `_rewarder` is ignored.\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        IRewarder _rewarder,\\n        bool overwrite\\n    ) public onlyOwner {\\n        require(\\n            Address.isContract(address(_rewarder)) ||\\n                address(_rewarder) == address(0),\\n            \\\"set: rewarder must be contract or zero\\\"\\n        );\\n        massUpdatePools();\\n\\n        // we re-adjust the total allocation points\\n        totalAllocPoint =\\n            totalAllocPoint -\\n            poolInfo[_pid].allocPoint +\\n            _allocPoint;\\n\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n\\n        if (overwrite) {\\n            rewarder[_pid] = _rewarder;\\n        }\\n        emit LogSetPool(\\n            _pid,\\n            _allocPoint,\\n            overwrite ? _rewarder : rewarder[_pid],\\n            overwrite\\n        );\\n    }\\n\\n    // View function to see pending BEETS on frontend.\\n    function pendingBeets(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (uint256 pending)\\n    {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        // how many BEETS per lp token\\n        uint256 accBeetsPerShare = pool.accBeetsPerShare;\\n        // total staked lp tokens in this pool\\n        uint256 lpSupply = lpTokens[_pid].balanceOf(address(this));\\n\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 blocksSinceLastReward = block.number - pool.lastRewardBlock;\\n            // based on the pool weight (allocation points) we calculate the beets rewarded for this specific pool\\n            uint256 beetsRewards =\\n                (blocksSinceLastReward * beetsPerBlock * pool.allocPoint) /\\n                    totalAllocPoint;\\n\\n            // we take parts of the rewards for treasury, these can be subject to change, so we recalculate it\\n            // a value of 1000 = 100%\\n            uint256 beetsRewardsForPool =\\n                (beetsRewards * POOL_PERCENTAGE) / 1000;\\n\\n            // we calculate the new amount of accumulated beets per LP token\\n            accBeetsPerShare =\\n                accBeetsPerShare +\\n                ((beetsRewardsForPool * ACC_BEETS_PRECISION) / lpSupply);\\n        }\\n        // based on the number of LP tokens the user owns, we calculate the pending amount by subtracting the amount\\n        // which he is not eligible for (joined the pool later) or has already harvested\\n        pending =\\n            (user.amount * accBeetsPerShare) /\\n            ACC_BEETS_PRECISION -\\n            user.rewardDebt;\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public returns (PoolInfo memory pool) {\\n        pool = poolInfo[_pid];\\n\\n        if (block.number > pool.lastRewardBlock) {\\n            // total lp tokens staked for this pool\\n            uint256 lpSupply = lpTokens[_pid].balanceOf(address(this));\\n            if (lpSupply > 0) {\\n                uint256 blocksSinceLastReward =\\n                    block.number - pool.lastRewardBlock;\\n\\n                // rewards for this pool based on his allocation points\\n                uint256 beetsRewards =\\n                    (blocksSinceLastReward * beetsPerBlock * pool.allocPoint) /\\n                        totalAllocPoint;\\n\\n                uint256 beetsRewardsForPool =\\n                    (beetsRewards * POOL_PERCENTAGE) / 1000;\\n\\n                beets.mint(\\n                    treasuryAddress,\\n                    (beetsRewards * TREASURY_PERCENTAGE) / 1000\\n                );\\n\\n                beets.mint(address(this), beetsRewardsForPool);\\n\\n                pool.accBeetsPerShare =\\n                    pool.accBeetsPerShare +\\n                    ((beetsRewardsForPool * ACC_BEETS_PRECISION) / lpSupply);\\n            }\\n            pool.lastRewardBlock = block.number;\\n            poolInfo[_pid] = pool;\\n\\n            emit LogUpdatePool(\\n                _pid,\\n                pool.lastRewardBlock,\\n                lpSupply,\\n                pool.accBeetsPerShare\\n            );\\n        }\\n    }\\n\\n    // Deposit LP tokens to MasterChef for BEETS allocation.\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _to\\n    ) public {\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = userInfo[_pid][_to];\\n\\n        user.amount = user.amount + _amount;\\n        // since we add more LP tokens, we have to keep track of the rewards he is not eligible for\\n        // if we would not do that, he would get rewards like he added them since the beginning of this pool\\n        // note that only the accBeetsPerShare have the precision applied\\n        user.rewardDebt =\\n            user.rewardDebt +\\n            (_amount * pool.accBeetsPerShare) /\\n            ACC_BEETS_PRECISION;\\n\\n        IRewarder _rewarder = rewarder[_pid];\\n        if (address(_rewarder) != address(0)) {\\n            _rewarder.onBeetsReward(_pid, _to, _to, 0, user.amount);\\n        }\\n\\n        lpTokens[_pid].safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        emit Deposit(msg.sender, _pid, _amount, _to);\\n    }\\n\\n    /// @notice Harvest proceeds for transaction sender to `_to`.\\n    /// @param _pid The index of the pool. See `poolInfo`.\\n    /// @param _to Receiver of BEETS rewards.\\n    function harvest(uint256 _pid, address _to) public {\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        // this would  be the amount if the user joined right from the start of the farm\\n        uint256 accumulatedBeets =\\n            (user.amount * pool.accBeetsPerShare) / ACC_BEETS_PRECISION;\\n        // subtracting the rewards the user is not eligible for\\n        uint256 eligibleBeets = accumulatedBeets - user.rewardDebt;\\n\\n        // we set the new rewardDebt to the current accumulated amount of rewards for his amount of LP token\\n        user.rewardDebt = accumulatedBeets;\\n\\n        if (eligibleBeets > 0) {\\n            safeBeetsTransfer(_to, eligibleBeets);\\n        }\\n\\n        IRewarder _rewarder = rewarder[_pid];\\n        if (address(_rewarder) != address(0)) {\\n            _rewarder.onBeetsReward(\\n                _pid,\\n                msg.sender,\\n                _to,\\n                eligibleBeets,\\n                user.amount\\n            );\\n        }\\n\\n        emit Harvest(msg.sender, _pid, eligibleBeets);\\n    }\\n\\n    /// @notice Withdraw LP tokens from MCV and harvest proceeds for transaction sender to `_to`.\\n    /// @param _pid The index of the pool. See `poolInfo`.\\n    /// @param _amount LP token amount to withdraw.\\n    /// @param _to Receiver of the LP tokens and BEETS rewards.\\n    function withdrawAndHarvest(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _to\\n    ) public {\\n        PoolInfo memory pool = updatePool(_pid);\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        require(_amount <= user.amount, \\\"cannot withdraw more than deposited\\\");\\n\\n        // this would  be the amount if the user joined right from the start of the farm\\n        uint256 accumulatedBeets =\\n            (user.amount * pool.accBeetsPerShare) / ACC_BEETS_PRECISION;\\n        // subtracting the rewards the user is not eligible for\\n        uint256 eligibleBeets = accumulatedBeets - user.rewardDebt;\\n\\n        /*\\n            after harvest & withdraw, he should be eligible for exactly 0 tokens\\n            => userInfo.amount * pool.accBeetsPerShare / ACC_BEETS_PRECISION == userInfo.rewardDebt\\n            since we are removing some LP's from userInfo.amount, we also have to remove\\n            the equivalent amount of reward debt\\n        */\\n\\n        user.rewardDebt =\\n            accumulatedBeets -\\n            (_amount * pool.accBeetsPerShare) /\\n            ACC_BEETS_PRECISION;\\n        user.amount = user.amount - _amount;\\n\\n        safeBeetsTransfer(_to, eligibleBeets);\\n\\n        IRewarder _rewarder = rewarder[_pid];\\n        if (address(_rewarder) != address(0)) {\\n            _rewarder.onBeetsReward(\\n                _pid,\\n                msg.sender,\\n                _to,\\n                eligibleBeets,\\n                user.amount\\n            );\\n        }\\n\\n        lpTokens[_pid].safeTransfer(_to, _amount);\\n\\n        emit Withdraw(msg.sender, _pid, _amount, _to);\\n        emit Harvest(msg.sender, _pid, eligibleBeets);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid, address _to) public {\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        uint256 amount = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n\\n        IRewarder _rewarder = rewarder[_pid];\\n        if (address(_rewarder) != address(0)) {\\n            _rewarder.onBeetsReward(_pid, msg.sender, _to, 0, 0);\\n        }\\n\\n        // Note: transfer can fail or succeed if `amount` is zero.\\n        lpTokens[_pid].safeTransfer(_to, amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, amount, _to);\\n    }\\n\\n    // Safe BEETS transfer function, just in case if rounding error causes pool to not have enough BEETS.\\n    function safeBeetsTransfer(address _to, uint256 _amount) internal {\\n        uint256 beetsBalance = beets.balanceOf(address(this));\\n        if (_amount > beetsBalance) {\\n            beets.transfer(_to, beetsBalance);\\n        } else {\\n            beets.transfer(_to, _amount);\\n        }\\n    }\\n\\n    // Update treasury address by the previous treasury.\\n    function treasury(address _treasuryAddress) public {\\n        require(\\n            msg.sender == treasuryAddress,\\n            \\\"access denied: setting treasury address\\\"\\n        );\\n        treasuryAddress = _treasuryAddress;\\n        emit SetTreasuryAddress(treasuryAddress, _treasuryAddress);\\n    }\\n\\n    function updateEmissionRate(uint256 _beetsPerBlock) public onlyOwner {\\n        require(\\n            _beetsPerBlock <= 6e18,\\n            \\\"maximum emission rate of 6 beets per block exceeded\\\"\\n        );\\n        massUpdatePools();\\n        beetsPerBlock = _beetsPerBlock;\\n        emit UpdateEmissionRate(msg.sender, _beetsPerBlock);\\n    }\\n}\",\"keccak256\":\"0xf78d76c55ee74499bd8e2bbc18019f3e9c9065ef9e48fd9a42eba0039a5b7a6c\",\"license\":\"MIXED\"}},\"version\":1}",
  "bytecode": "0x60806040526000600a553480156200001657600080fd5b506040516200213a3803806200213a833981016040819052620000399162000156565b620000443362000106565b6753444835ec580000821115620000c75760405162461bcd60e51b815260206004820152603360248201527f6d6178696d756d20656d697373696f6e2072617465206f66203620626565747360448201527f2070657220626c6f636b20657863656564656400000000000000000000000000606482015260840160405180910390fd5b600180546001600160a01b039586166001600160a01b0319918216179091556002805494909516931692909217909255600391909155600b55620001bc565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600080608085870312156200016d57600080fd5b84516200017a81620001a3565b60208601519094506200018d81620001a3565b6040860151606090960151949790965092505050565b6001600160a01b0381168114620001b957600080fd5b50565b611f6e80620001cc6000396000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c8063630b5ba1116100de5780638dbdbe6d11610097578063c346253d11610071578063c346253d14610379578063c5f956af1461038c578063d1abb9071461039f578063f2fde38b146103b257600080fd5b80638dbdbe6d1461030c57806393f1a40b1461031f578063ab7de0981461036657600080fd5b8063630b5ba1146102bc5780636a44e1f3146102c4578063715018a6146102cd5780638519359d146102d557806388bba42f146102e85780638da5cb5b146102fb57600080fd5b80631bb5e2dc1161014b5780632f940c70116101255780632f940c701461026257806339e5f4ff1461027557806348cd4cb11461027e57806351eb05a61461028757600080fd5b80631bb5e2dc14610211578063269db9001461023c5780632d809cb61461024f57600080fd5b8063081e3eda146101935780630ba84cd2146101aa5780631526fe27146101bf578063173b31d8146101ed57806317caf6f1146101f557806318fccc76146101fe575b600080fd5b6004545b6040519081526020015b60405180910390f35b6101bd6101b8366004611c63565b6103c5565b005b6101d26101cd366004611c63565b6104b1565b604080519384526020840192909252908201526060016101a1565b610197608081565b610197600a5481565b6101bd61020c366004611c95565b6104e4565b61022461021f366004611c63565b610635565b6040516001600160a01b0390911681526020016101a1565b61019761024a366004611c95565b61065f565b6101bd61025d366004611c29565b610822565b6101bd610270366004611c95565b6108d8565b61019761036881565b610197600b5481565b61029a610295366004611c63565b610a23565b60408051825181526020808401519082015291810151908201526060016101a1565b6101bd610d52565b61019760035481565b6101bd610d7e565b600154610224906001600160a01b031681565b6101bd6102f6366004611d35565b610db4565b6000546001600160a01b0316610224565b6101bd61031a366004611d07565b610f90565b61035161032d366004611c95565b60096020908152600092835260408084209091529082529020805460019091015482565b604080519283526020830191909152016101a1565b6101bd610374366004611cc5565b61112e565b610224610387366004611c63565b611431565b600254610224906001600160a01b031681565b6101bd6103ad366004611d07565b611441565b6101bd6103c0366004611c29565b61168b565b6000546001600160a01b031633146103f85760405162461bcd60e51b81526004016103ef90611dce565b60405180910390fd5b6753444835ec58000081111561046c5760405162461bcd60e51b815260206004820152603360248201527f6d6178696d756d20656d697373696f6e2072617465206f662036206265657473604482015272081c195c88189b1bd8dac8195e18d959591959606a1b60648201526084016103ef565b610474610d52565b600381905560405181815233907fe2492e003bbe8afa53088b406f0c1cb5d9e280370fc72a74cf116ffd343c40539060200160405180910390a250565b600481815481106104c157600080fd5b600091825260209091206003909102018054600182015460029092015490925083565b60006104ef83610a23565b6000848152600960209081526040808320338452909152808220908301518154939450909264e8d4a510009161052491611e6c565b61052e9190611e4a565b905060008260010154826105429190611e8b565b600184018390559050801561055b5761055b8582611726565b60006008878154811061057057610570611eff565b6000918252602090912001546001600160a01b0316905080156105f557835460405163494dffe160e11b81526001600160a01b0383169163929bffc2916105c2918b9133918c91899190600401611e03565b600060405180830381600087803b1580156105dc57600080fd5b505af11580156105f0573d6000803e3d6000fd5b505050505b604051828152879033907f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae06609249549060200160405180910390a350505050505050565b6005818154811061064557600080fd5b6000918252602090912001546001600160a01b0316905081565b6000806004848154811061067557610675611eff565b600091825260208083208784526009825260408085206001600160a01b038916865290925290832060039290920201600281015460058054929550929390929091889081106106c6576106c6611eff565b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561071257600080fd5b505afa158015610726573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074a9190611c7c565b905083600101544311801561075e57508015155b156107ea5760008460010154436107759190611e8b565b600a54865460035492935060009261078d9085611e6c565b6107979190611e6c565b6107a19190611e4a565b905060006103e86107b461036884611e6c565b6107be9190611e4a565b9050836107d064e8d4a5100083611e6c565b6107da9190611e4a565b6107e49086611e32565b94505050505b6001830154835464e8d4a5100090610803908590611e6c565b61080d9190611e4a565b6108179190611e8b565b979650505050505050565b6002546001600160a01b0316331461088c5760405162461bcd60e51b815260206004820152602760248201527f6163636573732064656e6965643a2073657474696e67207472656173757279206044820152666164647265737360c81b60648201526084016103ef565b600280546001600160a01b0319166001600160a01b03831690811790915560405181907f61885cdba916be748ff3e3f6f15e4206153b8ea3b7acabade9d04b4063a8351090600090a350565b6000828152600960209081526040808320338452909152812080548282556001820183905560088054929391928690811061091557610915611eff565b6000918252602090912001546001600160a01b03169050801561099a5760405163494dffe160e11b81526001600160a01b0382169063929bffc290610967908890339089906000908190600401611e03565b600060405180830381600087803b15801561098157600080fd5b505af1158015610995573d6000803e3d6000fd5b505050505b6109ce8483600588815481106109b2576109b2611eff565b6000918252602090912001546001600160a01b03169190611877565b836001600160a01b031685336001600160a01b03167f2cac5e20e1541d836381527a43f651851e302817b71dc8e810284e69210c1c6b85604051610a1491815260200190565b60405180910390a45050505050565b610a4760405180606001604052806000815260200160008152602001600081525090565b60048281548110610a5a57610a5a611eff565b600091825260209182902060408051606081018252600390930290910180548352600181015493830184905260020154908201529150431115610d4d57600060058381548110610aac57610aac611eff565b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610af857600080fd5b505afa158015610b0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b309190611c7c565b90508015610cbd576000826020015143610b4a9190611e8b565b600a548451600354929350600092610b629085611e6c565b610b6c9190611e6c565b610b769190611e4a565b905060006103e8610b8961036884611e6c565b610b939190611e4a565b6001546002549192506001600160a01b03908116916340c10f1991166103e8610bbd608087611e6c565b610bc79190611e4a565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015610c0d57600080fd5b505af1158015610c21573d6000803e3d6000fd5b50506001546040516340c10f1960e01b8152306004820152602481018590526001600160a01b0390911692506340c10f199150604401600060405180830381600087803b158015610c7157600080fd5b505af1158015610c85573d6000803e3d6000fd5b505050508364e8d4a5100082610c9b9190611e6c565b610ca59190611e4a565b8560400151610cb49190611e32565b60408601525050505b4360208301526004805483919085908110610cda57610cda611eff565b60009182526020918290208351600390920201908155828201516001820155604092830151600290910155838101518483015183519182529181018490529182015283907fcb7325664a4a3b7c7223eefc492a97ca4fdf94d46884621e5a8fae5a04b2b9d29060600160405180910390a2505b919050565b60045460005b81811015610d7a57610d6981610a23565b50610d7381611ece565b9050610d58565b5050565b6000546001600160a01b03163314610da85760405162461bcd60e51b81526004016103ef90611dce565b610db260006118da565b565b6000546001600160a01b03163314610dde5760405162461bcd60e51b81526004016103ef90611dce565b813b151580610df457506001600160a01b038216155b610e4f5760405162461bcd60e51b815260206004820152602660248201527f7365743a207265776172646572206d75737420626520636f6e7472616374206f60448201526572207a65726f60d01b60648201526084016103ef565b610e57610d52565b8260048581548110610e6b57610e6b611eff565b906000526020600020906003020160000154600a54610e8a9190611e8b565b610e949190611e32565b600a819055508260048581548110610eae57610eae611eff565b60009182526020909120600390910201558015610f08578160088581548110610ed957610ed9611eff565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b80610f3a5760088481548110610f2057610f20611eff565b6000918252602090912001546001600160a01b0316610f3c565b815b6001600160a01b0316847f95895a6ab1df54420d241b55243258a33e61b2194db66c1179ec521aae8e18658584604051610f829291909182521515602082015260400190565b60405180910390a350505050565b6000610f9b84610a23565b60008581526009602090815260408083206001600160a01b03871684529091529020805491925090610fce908590611e32565b8155604082015164e8d4a5100090610fe69086611e6c565b610ff09190611e4a565b8160010154610fff9190611e32565b816001018190555060006008868154811061101c5761101c611eff565b6000918252602090912001546001600160a01b0316905080156110a257815460405163494dffe160e11b81526001600160a01b0383169163929bffc29161106f918a918991829160009190600401611e03565b600060405180830381600087803b15801561108957600080fd5b505af115801561109d573d6000803e3d6000fd5b505050505b6110d833308760058a815481106110bb576110bb611eff565b6000918252602090912001546001600160a01b031692919061192a565b836001600160a01b031686336001600160a01b03167f02d7e648dd130fc184d383e55bb126ac4c9c60e8f94bf05acdf557ba2d540b478860405161111e91815260200190565b60405180910390a4505050505050565b6000546001600160a01b031633146111585760405162461bcd60e51b81526004016103ef90611dce565b813b6111b55760405162461bcd60e51b815260206004820152602660248201527f6164643a204c5020746f6b656e206d75737420626520612076616c696420636f6044820152651b9d1c9858dd60d21b60648201526084016103ef565b803b1515806111cb57506001600160a01b038116155b6112265760405162461bcd60e51b815260206004820152602660248201527f6164643a207265776172646572206d75737420626520636f6e7472616374206f60448201526572207a65726f60d01b60648201526084016103ef565b611231600683611962565b156112765760405162461bcd60e51b81526020600482015260156024820152741859190e88131408185b1c9958591e481859191959605a1b60448201526064016103ef565b61127e610d52565b6000600b54431161129157600b54611293565b435b905083600a546112a39190611e32565b600a55600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319166001600160a01b0385161790556112fc600684611989565b506008805460018082019092557ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180546001600160a01b0319166001600160a01b0385811691821790925560408051606081018252888152602081018681526000928201838152600480548089018255945291517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b600390940293840155517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c830155517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d909101556005549092918616916113f891611e8b565b6040518781527f81ee0f8c5c46e2cb41984886f77a84181724abb86c32a5f6de539b07509d45e59060200160405180910390a450505050565b6008818154811061064557600080fd5b600061144c84610a23565b600085815260096020908152604080832033845290915290208054919250908411156114c65760405162461bcd60e51b815260206004820152602360248201527f63616e6e6f74207769746864726177206d6f7265207468616e206465706f73696044820152621d195960ea1b60648201526084016103ef565b600064e8d4a51000836040015183600001546114e29190611e6c565b6114ec9190611e4a565b905060008260010154826115009190611e8b565b905064e8d4a510008460400151876115189190611e6c565b6115229190611e4a565b61152c9083611e8b565b6001840155825461153e908790611e8b565b835561154a8582611726565b60006008888154811061155f5761155f611eff565b6000918252602090912001546001600160a01b0316905080156115e457835460405163494dffe160e11b81526001600160a01b0383169163929bffc2916115b1918c9133918c91899190600401611e03565b600060405180830381600087803b1580156115cb57600080fd5b505af11580156115df573d6000803e3d6000fd5b505050505b6115fc868860058b815481106109b2576109b2611eff565b856001600160a01b031688336001600160a01b03167f8166bf25f8a2b7ed3c85049207da4358d16edbed977d23fa2ee6f0dde3ec21328a60405161164291815260200190565b60405180910390a4604051828152889033907f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae06609249549060200160405180910390a35050505050505050565b6000546001600160a01b031633146116b55760405162461bcd60e51b81526004016103ef90611dce565b6001600160a01b03811661171a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103ef565b611723816118da565b50565b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561176a57600080fd5b505afa15801561177e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a29190611c7c565b9050808211156118395760015460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018490529091169063a9059cbb906044015b602060405180830381600087803b1580156117fb57600080fd5b505af115801561180f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118339190611c46565b50505050565b60015460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529091169063a9059cbb906044016117e1565b505050565b6040516001600160a01b03831660248201526044810182905261187290849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261199e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526118339085906323b872dd60e01b906084016118a3565b6001600160a01b038116600090815260018301602052604081205415155b90505b92915050565b6000611980836001600160a01b038416611a70565b60006119f3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611abf9092919063ffffffff16565b8051909150156118725780806020019051810190611a119190611c46565b6118725760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103ef565b6000818152600183016020526040812054611ab757508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611983565b506000611983565b6060611ace8484600085611ad8565b90505b9392505050565b606082471015611b395760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103ef565b843b611b875760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103ef565b600080866001600160a01b03168587604051611ba39190611d7f565b60006040518083038185875af1925050503d8060008114611be0576040519150601f19603f3d011682016040523d82523d6000602084013e611be5565b606091505b509150915061081782828660608315611bff575081611ad1565b825115611c0f5782518084602001fd5b8160405162461bcd60e51b81526004016103ef9190611d9b565b600060208284031215611c3b57600080fd5b8135611ad181611f15565b600060208284031215611c5857600080fd5b8151611ad181611f2a565b600060208284031215611c7557600080fd5b5035919050565b600060208284031215611c8e57600080fd5b5051919050565b60008060408385031215611ca857600080fd5b823591506020830135611cba81611f15565b809150509250929050565b600080600060608486031215611cda57600080fd5b833592506020840135611cec81611f15565b91506040840135611cfc81611f15565b809150509250925092565b600080600060608486031215611d1c57600080fd5b83359250602084013591506040840135611cfc81611f15565b60008060008060808587031215611d4b57600080fd5b84359350602085013592506040850135611d6481611f15565b91506060850135611d7481611f2a565b939692955090935050565b60008251611d91818460208701611ea2565b9190910192915050565b6020815260008251806020840152611dba816040850160208701611ea2565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b9485526001600160a01b0393841660208601529190921660408401526060830191909152608082015260a00190565b60008219821115611e4557611e45611ee9565b500190565b600082611e6757634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611e8657611e86611ee9565b500290565b600082821015611e9d57611e9d611ee9565b500390565b60005b83811015611ebd578181015183820152602001611ea5565b838111156118335750506000910152565b6000600019821415611ee257611ee2611ee9565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b038116811461172357600080fd5b801515811461172357600080fdfea26469706673582212202ec60092b254529117bc35910d58a2538466230c34e005c218af0a5fb759e7ec64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c8063630b5ba1116100de5780638dbdbe6d11610097578063c346253d11610071578063c346253d14610379578063c5f956af1461038c578063d1abb9071461039f578063f2fde38b146103b257600080fd5b80638dbdbe6d1461030c57806393f1a40b1461031f578063ab7de0981461036657600080fd5b8063630b5ba1146102bc5780636a44e1f3146102c4578063715018a6146102cd5780638519359d146102d557806388bba42f146102e85780638da5cb5b146102fb57600080fd5b80631bb5e2dc1161014b5780632f940c70116101255780632f940c701461026257806339e5f4ff1461027557806348cd4cb11461027e57806351eb05a61461028757600080fd5b80631bb5e2dc14610211578063269db9001461023c5780632d809cb61461024f57600080fd5b8063081e3eda146101935780630ba84cd2146101aa5780631526fe27146101bf578063173b31d8146101ed57806317caf6f1146101f557806318fccc76146101fe575b600080fd5b6004545b6040519081526020015b60405180910390f35b6101bd6101b8366004611c63565b6103c5565b005b6101d26101cd366004611c63565b6104b1565b604080519384526020840192909252908201526060016101a1565b610197608081565b610197600a5481565b6101bd61020c366004611c95565b6104e4565b61022461021f366004611c63565b610635565b6040516001600160a01b0390911681526020016101a1565b61019761024a366004611c95565b61065f565b6101bd61025d366004611c29565b610822565b6101bd610270366004611c95565b6108d8565b61019761036881565b610197600b5481565b61029a610295366004611c63565b610a23565b60408051825181526020808401519082015291810151908201526060016101a1565b6101bd610d52565b61019760035481565b6101bd610d7e565b600154610224906001600160a01b031681565b6101bd6102f6366004611d35565b610db4565b6000546001600160a01b0316610224565b6101bd61031a366004611d07565b610f90565b61035161032d366004611c95565b60096020908152600092835260408084209091529082529020805460019091015482565b604080519283526020830191909152016101a1565b6101bd610374366004611cc5565b61112e565b610224610387366004611c63565b611431565b600254610224906001600160a01b031681565b6101bd6103ad366004611d07565b611441565b6101bd6103c0366004611c29565b61168b565b6000546001600160a01b031633146103f85760405162461bcd60e51b81526004016103ef90611dce565b60405180910390fd5b6753444835ec58000081111561046c5760405162461bcd60e51b815260206004820152603360248201527f6d6178696d756d20656d697373696f6e2072617465206f662036206265657473604482015272081c195c88189b1bd8dac8195e18d959591959606a1b60648201526084016103ef565b610474610d52565b600381905560405181815233907fe2492e003bbe8afa53088b406f0c1cb5d9e280370fc72a74cf116ffd343c40539060200160405180910390a250565b600481815481106104c157600080fd5b600091825260209091206003909102018054600182015460029092015490925083565b60006104ef83610a23565b6000848152600960209081526040808320338452909152808220908301518154939450909264e8d4a510009161052491611e6c565b61052e9190611e4a565b905060008260010154826105429190611e8b565b600184018390559050801561055b5761055b8582611726565b60006008878154811061057057610570611eff565b6000918252602090912001546001600160a01b0316905080156105f557835460405163494dffe160e11b81526001600160a01b0383169163929bffc2916105c2918b9133918c91899190600401611e03565b600060405180830381600087803b1580156105dc57600080fd5b505af11580156105f0573d6000803e3d6000fd5b505050505b604051828152879033907f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae06609249549060200160405180910390a350505050505050565b6005818154811061064557600080fd5b6000918252602090912001546001600160a01b0316905081565b6000806004848154811061067557610675611eff565b600091825260208083208784526009825260408085206001600160a01b038916865290925290832060039290920201600281015460058054929550929390929091889081106106c6576106c6611eff565b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561071257600080fd5b505afa158015610726573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074a9190611c7c565b905083600101544311801561075e57508015155b156107ea5760008460010154436107759190611e8b565b600a54865460035492935060009261078d9085611e6c565b6107979190611e6c565b6107a19190611e4a565b905060006103e86107b461036884611e6c565b6107be9190611e4a565b9050836107d064e8d4a5100083611e6c565b6107da9190611e4a565b6107e49086611e32565b94505050505b6001830154835464e8d4a5100090610803908590611e6c565b61080d9190611e4a565b6108179190611e8b565b979650505050505050565b6002546001600160a01b0316331461088c5760405162461bcd60e51b815260206004820152602760248201527f6163636573732064656e6965643a2073657474696e67207472656173757279206044820152666164647265737360c81b60648201526084016103ef565b600280546001600160a01b0319166001600160a01b03831690811790915560405181907f61885cdba916be748ff3e3f6f15e4206153b8ea3b7acabade9d04b4063a8351090600090a350565b6000828152600960209081526040808320338452909152812080548282556001820183905560088054929391928690811061091557610915611eff565b6000918252602090912001546001600160a01b03169050801561099a5760405163494dffe160e11b81526001600160a01b0382169063929bffc290610967908890339089906000908190600401611e03565b600060405180830381600087803b15801561098157600080fd5b505af1158015610995573d6000803e3d6000fd5b505050505b6109ce8483600588815481106109b2576109b2611eff565b6000918252602090912001546001600160a01b03169190611877565b836001600160a01b031685336001600160a01b03167f2cac5e20e1541d836381527a43f651851e302817b71dc8e810284e69210c1c6b85604051610a1491815260200190565b60405180910390a45050505050565b610a4760405180606001604052806000815260200160008152602001600081525090565b60048281548110610a5a57610a5a611eff565b600091825260209182902060408051606081018252600390930290910180548352600181015493830184905260020154908201529150431115610d4d57600060058381548110610aac57610aac611eff565b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610af857600080fd5b505afa158015610b0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b309190611c7c565b90508015610cbd576000826020015143610b4a9190611e8b565b600a548451600354929350600092610b629085611e6c565b610b6c9190611e6c565b610b769190611e4a565b905060006103e8610b8961036884611e6c565b610b939190611e4a565b6001546002549192506001600160a01b03908116916340c10f1991166103e8610bbd608087611e6c565b610bc79190611e4a565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015610c0d57600080fd5b505af1158015610c21573d6000803e3d6000fd5b50506001546040516340c10f1960e01b8152306004820152602481018590526001600160a01b0390911692506340c10f199150604401600060405180830381600087803b158015610c7157600080fd5b505af1158015610c85573d6000803e3d6000fd5b505050508364e8d4a5100082610c9b9190611e6c565b610ca59190611e4a565b8560400151610cb49190611e32565b60408601525050505b4360208301526004805483919085908110610cda57610cda611eff565b60009182526020918290208351600390920201908155828201516001820155604092830151600290910155838101518483015183519182529181018490529182015283907fcb7325664a4a3b7c7223eefc492a97ca4fdf94d46884621e5a8fae5a04b2b9d29060600160405180910390a2505b919050565b60045460005b81811015610d7a57610d6981610a23565b50610d7381611ece565b9050610d58565b5050565b6000546001600160a01b03163314610da85760405162461bcd60e51b81526004016103ef90611dce565b610db260006118da565b565b6000546001600160a01b03163314610dde5760405162461bcd60e51b81526004016103ef90611dce565b813b151580610df457506001600160a01b038216155b610e4f5760405162461bcd60e51b815260206004820152602660248201527f7365743a207265776172646572206d75737420626520636f6e7472616374206f60448201526572207a65726f60d01b60648201526084016103ef565b610e57610d52565b8260048581548110610e6b57610e6b611eff565b906000526020600020906003020160000154600a54610e8a9190611e8b565b610e949190611e32565b600a819055508260048581548110610eae57610eae611eff565b60009182526020909120600390910201558015610f08578160088581548110610ed957610ed9611eff565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b80610f3a5760088481548110610f2057610f20611eff565b6000918252602090912001546001600160a01b0316610f3c565b815b6001600160a01b0316847f95895a6ab1df54420d241b55243258a33e61b2194db66c1179ec521aae8e18658584604051610f829291909182521515602082015260400190565b60405180910390a350505050565b6000610f9b84610a23565b60008581526009602090815260408083206001600160a01b03871684529091529020805491925090610fce908590611e32565b8155604082015164e8d4a5100090610fe69086611e6c565b610ff09190611e4a565b8160010154610fff9190611e32565b816001018190555060006008868154811061101c5761101c611eff565b6000918252602090912001546001600160a01b0316905080156110a257815460405163494dffe160e11b81526001600160a01b0383169163929bffc29161106f918a918991829160009190600401611e03565b600060405180830381600087803b15801561108957600080fd5b505af115801561109d573d6000803e3d6000fd5b505050505b6110d833308760058a815481106110bb576110bb611eff565b6000918252602090912001546001600160a01b031692919061192a565b836001600160a01b031686336001600160a01b03167f02d7e648dd130fc184d383e55bb126ac4c9c60e8f94bf05acdf557ba2d540b478860405161111e91815260200190565b60405180910390a4505050505050565b6000546001600160a01b031633146111585760405162461bcd60e51b81526004016103ef90611dce565b813b6111b55760405162461bcd60e51b815260206004820152602660248201527f6164643a204c5020746f6b656e206d75737420626520612076616c696420636f6044820152651b9d1c9858dd60d21b60648201526084016103ef565b803b1515806111cb57506001600160a01b038116155b6112265760405162461bcd60e51b815260206004820152602660248201527f6164643a207265776172646572206d75737420626520636f6e7472616374206f60448201526572207a65726f60d01b60648201526084016103ef565b611231600683611962565b156112765760405162461bcd60e51b81526020600482015260156024820152741859190e88131408185b1c9958591e481859191959605a1b60448201526064016103ef565b61127e610d52565b6000600b54431161129157600b54611293565b435b905083600a546112a39190611e32565b600a55600580546001810182556000919091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319166001600160a01b0385161790556112fc600684611989565b506008805460018082019092557ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30180546001600160a01b0319166001600160a01b0385811691821790925560408051606081018252888152602081018681526000928201838152600480548089018255945291517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b600390940293840155517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19c830155517f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19d909101556005549092918616916113f891611e8b565b6040518781527f81ee0f8c5c46e2cb41984886f77a84181724abb86c32a5f6de539b07509d45e59060200160405180910390a450505050565b6008818154811061064557600080fd5b600061144c84610a23565b600085815260096020908152604080832033845290915290208054919250908411156114c65760405162461bcd60e51b815260206004820152602360248201527f63616e6e6f74207769746864726177206d6f7265207468616e206465706f73696044820152621d195960ea1b60648201526084016103ef565b600064e8d4a51000836040015183600001546114e29190611e6c565b6114ec9190611e4a565b905060008260010154826115009190611e8b565b905064e8d4a510008460400151876115189190611e6c565b6115229190611e4a565b61152c9083611e8b565b6001840155825461153e908790611e8b565b835561154a8582611726565b60006008888154811061155f5761155f611eff565b6000918252602090912001546001600160a01b0316905080156115e457835460405163494dffe160e11b81526001600160a01b0383169163929bffc2916115b1918c9133918c91899190600401611e03565b600060405180830381600087803b1580156115cb57600080fd5b505af11580156115df573d6000803e3d6000fd5b505050505b6115fc868860058b815481106109b2576109b2611eff565b856001600160a01b031688336001600160a01b03167f8166bf25f8a2b7ed3c85049207da4358d16edbed977d23fa2ee6f0dde3ec21328a60405161164291815260200190565b60405180910390a4604051828152889033907f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae06609249549060200160405180910390a35050505050505050565b6000546001600160a01b031633146116b55760405162461bcd60e51b81526004016103ef90611dce565b6001600160a01b03811661171a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103ef565b611723816118da565b50565b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561176a57600080fd5b505afa15801561177e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a29190611c7c565b9050808211156118395760015460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018490529091169063a9059cbb906044015b602060405180830381600087803b1580156117fb57600080fd5b505af115801561180f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118339190611c46565b50505050565b60015460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529091169063a9059cbb906044016117e1565b505050565b6040516001600160a01b03831660248201526044810182905261187290849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261199e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b03808516602483015283166044820152606481018290526118339085906323b872dd60e01b906084016118a3565b6001600160a01b038116600090815260018301602052604081205415155b90505b92915050565b6000611980836001600160a01b038416611a70565b60006119f3826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611abf9092919063ffffffff16565b8051909150156118725780806020019051810190611a119190611c46565b6118725760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103ef565b6000818152600183016020526040812054611ab757508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611983565b506000611983565b6060611ace8484600085611ad8565b90505b9392505050565b606082471015611b395760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103ef565b843b611b875760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103ef565b600080866001600160a01b03168587604051611ba39190611d7f565b60006040518083038185875af1925050503d8060008114611be0576040519150601f19603f3d011682016040523d82523d6000602084013e611be5565b606091505b509150915061081782828660608315611bff575081611ad1565b825115611c0f5782518084602001fd5b8160405162461bcd60e51b81526004016103ef9190611d9b565b600060208284031215611c3b57600080fd5b8135611ad181611f15565b600060208284031215611c5857600080fd5b8151611ad181611f2a565b600060208284031215611c7557600080fd5b5035919050565b600060208284031215611c8e57600080fd5b5051919050565b60008060408385031215611ca857600080fd5b823591506020830135611cba81611f15565b809150509250929050565b600080600060608486031215611cda57600080fd5b833592506020840135611cec81611f15565b91506040840135611cfc81611f15565b809150509250925092565b600080600060608486031215611d1c57600080fd5b83359250602084013591506040840135611cfc81611f15565b60008060008060808587031215611d4b57600080fd5b84359350602085013592506040850135611d6481611f15565b91506060850135611d7481611f2a565b939692955090935050565b60008251611d91818460208701611ea2565b9190910192915050565b6020815260008251806020840152611dba816040850160208701611ea2565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b9485526001600160a01b0393841660208601529190921660408401526060830191909152608082015260a00190565b60008219821115611e4557611e45611ee9565b500190565b600082611e6757634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615611e8657611e86611ee9565b500290565b600082821015611e9d57611e9d611ee9565b500390565b60005b83811015611ebd578181015183820152602001611ea5565b838111156118335750506000910152565b6000600019821415611ee257611ee2611ee9565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b038116811461172357600080fd5b801515811461172357600080fdfea26469706673582212202ec60092b254529117bc35910d58a2538466230c34e005c218af0a5fb759e7ec64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "harvest(uint256,address)": {
        "params": {
          "_pid": "The index of the pool. See `poolInfo`.",
          "_to": "Receiver of BEETS rewards."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "set(uint256,uint256,address,bool)": {
        "params": {
          "_allocPoint": "New AP of the pool.",
          "_pid": "The index of the pool. See `poolInfo`.",
          "_rewarder": "Address of the rewarder delegate.",
          "overwrite": "True if _rewarder should be `set`. Otherwise `_rewarder` is ignored."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawAndHarvest(uint256,uint256,address)": {
        "params": {
          "_amount": "LP token amount to withdraw.",
          "_pid": "The index of the pool. See `poolInfo`.",
          "_to": "Receiver of the LP tokens and BEETS rewards."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "harvest(uint256,address)": {
        "notice": "Harvest proceeds for transaction sender to `_to`."
      },
      "lpTokens(uint256)": {
        "notice": "Address of the LP token for each MCV pool."
      },
      "rewarder(uint256)": {
        "notice": "Address of each `IRewarder` contract in MCV."
      },
      "withdrawAndHarvest(uint256,uint256,address)": {
        "notice": "Withdraw LP tokens from MCV and harvest proceeds for transaction sender to `_to`."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1784,
        "contract": "contracts/BeethovenxMasterChef.sol:BeethovenxMasterChef",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1974,
        "contract": "contracts/BeethovenxMasterChef.sol:BeethovenxMasterChef",
        "label": "beets",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(BeethovenxToken)1917"
      },
      {
        "astId": 1976,
        "contract": "contracts/BeethovenxMasterChef.sol:BeethovenxMasterChef",
        "label": "treasuryAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1978,
        "contract": "contracts/BeethovenxMasterChef.sol:BeethovenxMasterChef",
        "label": "beetsPerBlock",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1991,
        "contract": "contracts/BeethovenxMasterChef.sol:BeethovenxMasterChef",
        "label": "poolInfo",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(PoolInfo)1971_storage)dyn_storage"
      },
      {
        "astId": 1996,
        "contract": "contracts/BeethovenxMasterChef.sol:BeethovenxMasterChef",
        "label": "lpTokens",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_contract(IERC20)77)dyn_storage"
      },
      {
        "astId": 1999,
        "contract": "contracts/BeethovenxMasterChef.sol:BeethovenxMasterChef",
        "label": "lpTokenAddresses",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(AddressSet)905_storage"
      },
      {
        "astId": 2004,
        "contract": "contracts/BeethovenxMasterChef.sol:BeethovenxMasterChef",
        "label": "rewarder",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_contract(IRewarder)1948)dyn_storage"
      },
      {
        "astId": 2011,
        "contract": "contracts/BeethovenxMasterChef.sol:BeethovenxMasterChef",
        "label": "userInfo",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1964_storage))"
      },
      {
        "astId": 2014,
        "contract": "contracts/BeethovenxMasterChef.sol:BeethovenxMasterChef",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2016,
        "contract": "contracts/BeethovenxMasterChef.sol:BeethovenxMasterChef",
        "label": "startBlock",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(IERC20)77)dyn_storage": {
        "base": "t_contract(IERC20)77",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(IRewarder)1948)dyn_storage": {
        "base": "t_contract(IRewarder)1948",
        "encoding": "dynamic_array",
        "label": "contract IRewarder[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PoolInfo)1971_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)1971_storage",
        "encoding": "dynamic_array",
        "label": "struct BeethovenxMasterChef.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(BeethovenxToken)1917": {
        "encoding": "inplace",
        "label": "contract BeethovenxToken",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)77": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IRewarder)1948": {
        "encoding": "inplace",
        "label": "contract IRewarder",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)1964_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BeethovenxMasterChef.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)1964_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1964_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct BeethovenxMasterChef.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)1964_storage)"
      },
      "t_struct(AddressSet)905_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 904,
            "contract": "contracts/BeethovenxMasterChef.sol:BeethovenxMasterChef",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)604_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PoolInfo)1971_storage": {
        "encoding": "inplace",
        "label": "struct BeethovenxMasterChef.PoolInfo",
        "members": [
          {
            "astId": 1966,
            "contract": "contracts/BeethovenxMasterChef.sol:BeethovenxMasterChef",
            "label": "allocPoint",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1968,
            "contract": "contracts/BeethovenxMasterChef.sol:BeethovenxMasterChef",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1970,
            "contract": "contracts/BeethovenxMasterChef.sol:BeethovenxMasterChef",
            "label": "accBeetsPerShare",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)604_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 599,
            "contract": "contracts/BeethovenxMasterChef.sol:BeethovenxMasterChef",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 603,
            "contract": "contracts/BeethovenxMasterChef.sol:BeethovenxMasterChef",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserInfo)1964_storage": {
        "encoding": "inplace",
        "label": "struct BeethovenxMasterChef.UserInfo",
        "members": [
          {
            "astId": 1961,
            "contract": "contracts/BeethovenxMasterChef.sol:BeethovenxMasterChef",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1963,
            "contract": "contracts/BeethovenxMasterChef.sol:BeethovenxMasterChef",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}